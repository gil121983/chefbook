{"version":3,"sources":["img/sushi.svg","img/avocado.png","Header.js","Recipe.js","Pagination.js","SimpleSlider.js","FrontPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","subTitleStyle","margin","Recipe","title","time","image","dietLabel","ingredients","healthLabels","calories","cautions","link","author","openRecipe","Swal","fire","backdrop","background","imageUrl","imageHeight","html","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","value","timer","showConfirmButton","onClick","style","map","label","index","key","src","Pagination","this","props","recipes","length","loadResults","Component","LazyLoad","settings","dots","lazyLoad","infinite","speed","slidesToShow","slidesToScroll","initialSlide","autoplaySpeed","cssEase","pauseOnHover","arrows","alt","FrontPage","changeOpacity","setState","opacity","state","setTimeout","recipesArrLen","sushi","App","useState","setRecipes","search","setSearch","query","setQuery","from","to","page","setPage","useEffect","getServer","a","URL_Req","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","onChange","target","recipe","console","log","uuidv4","dietLabels","totalTime","ingredientLines","url","source","nextFrom","nextTo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8434c308.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sushi.57348151.svg\";","module.exports = __webpack_public_path__ + \"static/media/avocado.59291e7a.png\";","import React from 'react'\n\nfunction Header() {\n    return (\n        <div className=\"App-header\">\n            <h1>CHEFBOOK</h1>\n\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport Swal from 'sweetalert2'\n\nconst Recipe = ({ title, time, image, dietLabel, ingredients, healthLabels, calories, cautions, link, author }) => {\n\n    const openRecipe = () => {\n        Swal.fire({\n            backdrop: 'rgba()40,40,40,0.4',\n            background: 'linear-gradient(to right, #f06406 0%, #e1fe40 100%)', imageUrl: image,\n            imageHeight: 300,\n            title,\n            html: `<div>${healthLabels}</div> \n            <div>Calories: ${calories}</div> \n            <h3>Cautions:</h3>  \n            ${cautions}\n            <h3>Ingredients:</h3>  \n            ${ingredients}<br>\n            <a href=${link}>full recipe at ${author}</a>\n            `,\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#3085d6',\n            confirmButtonText: 'Save Recipe',\n            cancelButtonText: 'ok'\n        }).then((result) => {\n            if (result.value) {\n                Swal.fire({\n                    title: 'saved to favorites',\n                    timer: 1500,\n                    showConfirmButton: false,\n                }\n                )\n            }\n        })\n    }\n\n\n    return (\n        <div className='recipe-div'>\n            <div className='recipe-title'>\n                <h2 onClick={openRecipe}>{title}</h2>\n                <div>\n                    <span style={subTitleStyle}>{(time) ? `⌛${time} min'` : null}</span>\n                    {dietLabel.map((label, index) => <span key={index} style={subTitleStyle}>✔{label} </span>)}\n                </div>\n            </div>\n            <img src={image} onClick={openRecipe} />\n        </div>\n    )\n}\nconst subTitleStyle = {\n    margin: '5px',\n}\nexport default Recipe","import React, { Component } from 'react'\n\nexport default class Pagination extends Component {\n    render() {\n        if (this.props.recipes.length > 0) {\n            return <button\n                onClick={this.props.loadResults}>\n                load more results\n            </button>\n        } else {\n            return null\n        }\n    }\n}\n","import React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport avocado from './img/avocado.png'\n\n\nexport default class LazyLoad extends Component {\n    render() {\n        const settings = {\n            dots: true,\n            lazyLoad: true,\n            infinite: true,\n            speed: 4000,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            initialSlide: 2,\n            autoplaySpeed: 4000,\n            cssEase: \"ease-in-out\",\n            pauseOnHover: true,\n            arrows: false,\n            dots: false,\n            autoplay: true,\n\n        };\n\n        return (\n            <div>\n\n                <Slider {...settings} className=\"slideshow-container\">\n\n                    <div className='slide-container '>\n                        <div className='slide'>\n                            <div className='slide-title' >Broccoli and Noodle Supreme 2</div>\n                            <div className='slide-info' >\n                                <div className='slide-info-item' >⌛25 min'</div>\n                                <div className='slide-info-item' >✔balanced</div>\n                            </div>\n                            <img src='https://www.edamam.com/web-img/f22/f22699a5d7e8d6d1e03b667091ac37d2.jpg' className='slide-img' alt='' />\n                        </div>\n                    </div>\n\n                    <div className='slide-container'>\n                        <div className='slide'>\n                            <div className='slide-title' >Garlic beef</div>\n                            <div className='slide-info' >\n                                <div className='slide-info-item' >✔High-Protein</div>\n                                <div className='slide-info-item' >✔Low-Carb</div>\n                            </div>\n                            <img\n                                src='https://www.edamam.com/web-img/517/5170ac6de7b61cf82710b9ad257a2e34.jpg'\n                                className='slide-img'\n                                alt='' />\n                        </div>\n                    </div>\n\n                    <div className='slide-container'>\n                        <div className='slide'>\n                            <div className='slide-title' >Avocado-and-Onion Salad</div>\n                            <div className='slide-info' >\n                                <div className='slide-info-item' >⌛10 min'</div>\n                                <div className='slide-info-item' >✔Low-Carb</div>\n                            </div>\n                            <img\n                                src='https://www.edamam.com/web-img/1be/1be326c870165065532a9f49f3c28aab.jpg'\n                                className='slide-img'\n                                alt='' />\n                        </div>\n                    </div>\n\n                </Slider>\n            </div>\n        );\n    }\n}\n\n","import React, { Component, useState } from 'react'\nimport sushi from './img/sushi.svg'\nimport './frontpage.css'\nimport LazyLoad from './SimpleSlider'\n\n\nexport default class FrontPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { opacity: '0.01' }\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.changeOpacity()\n        }, 500);\n    }\n    changeOpacity = () => { this.setState({ opacity: '1' }) }\n\n    render() {\n        let opacity = this.state.opacity\n        if (!this.props.recipesArrLen) {\n            return (\n                <>\n                    <LazyLoad />\n                    <div className=\"img-container\" >\n                        <img className='sushi' src={sushi} style={{ opacity: opacity }} alt='' />\n                    </div>\n                </>\n            )\n        } else {\n            return null;\n        }\n    }\n}\n","import React, { useEffect, useState, Component } from 'react'\nimport Header from './Header'\nimport Recipe from './Recipe'\nimport Pagination from './Pagination'\nimport { v4 as uuidv4 } from 'uuid'\nimport './App.css'\nimport FrontPage from './FrontPage'\n\n\nconst App = () => {\n  const APP_ID = '7570c869';\n  const APP_KEY = '5dbde407febe17d64586062bbdad10e6'\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('')\n  const [page, setPage] = useState({ from: 0, to: 12 })\n\n  useEffect(() => {\n    getServer()\n  }, [query, page])\n\n  const getServer = async () => {\n    const { from, to } = page;\n    const URL_Req = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=${from}&to=${to}`\n    const response = await fetch(URL_Req)\n    const data = await response.json()\n    setRecipes([...recipes, ...data.hits]);\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault()\n    setRecipes([])\n    setQuery(search)\n    setPage({ from: 0, to: 12 })\n  }\n\n  const loadResults = e => {\n    let nextFrom = page.from + 12;\n    let nextTo = page.to + 12;\n    setPage({ from: nextFrom, to: nextTo })\n  }\n\n\n  return (\n    <div className=\"App\" >\n\n      <Header />\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch} />\n        <button type=\"submoit\" className=\"submit-btn\">SEARCH</button>\n      </form>\n\n      <FrontPage recipesArrLen={recipes.length} />\n      <div className=\"results-div\">\n        {recipes.map((recipe) => {\n          console.log(recipe)\n          return (\n            <Recipe\n              key={uuidv4()}\n              title={recipe.recipe.label}\n              dietLabel={recipe.recipe.dietLabels}\n              image={recipe.recipe.image}\n              time={recipe.recipe.totalTime}\n              ingredients={recipe.recipe.ingredientLines}\n              healthLabels={recipe.recipe.healthLabels}\n              calories={recipe.recipe.calories}\n              cautions={recipe.recipe.cautions}\n              link={recipe.recipe.url}\n              author={recipe.recipe.source}\n            />\n          )\n        }\n        )}\n      </div>\n\n      <Pagination loadResults={loadResults} recipes={recipes} />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}