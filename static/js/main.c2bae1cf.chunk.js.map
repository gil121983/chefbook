{"version":3,"sources":["Header.js","Recipe.js","Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Recipe","title","time","image","dietLabel","ingredients","healthLabels","calories","cautions","openRecipe","Swal","fire","backdrop","background","imageUrl","imageHeight","html","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","timer","showConfirmButton","onClick","src","Pagination","this","props","recipes","length","loadResults","Component","App","useState","setRecipes","search","setSearch","query","setQuery","from","to","page","setPage","lastElementRef","useRef","useCallback","node","console","log","useEffect","getServer","a","URL_Req","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","onChange","target","map","recipe","index","ref","key","uuidv4","label","dietLabels","totalTime","ingredientLines","nextFrom","nextTo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2bae1cf.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <div className=\"App-header\">\n            <h1>CHEFBOOK</h1>\n\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport Swal from 'sweetalert2'\n\nconst Recipe = ({ title, time, image, dietLabel, ingredients, healthLabels, calories, cautions }) => {\n\n    const openRecipe = () => {\n        Swal.fire({\n            backdrop: 'rgba()40,40,40,0.4',\n            background: 'linear-gradient(to right, #f06406 0%, #e1fe40 100%)', imageUrl: image,\n            imageHeight: 300,\n            title,\n            html: `<div>${healthLabels}</div> \n            <div>Calories: ${calories}</div> \n            <h3>Cautions:</h3>  \n            ${cautions}\n            <h3>Ingredients:</h3>  \n            ${ingredients}\n            `,\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Recipe'\n        }).then((result) => {\n            if (result.value) {\n                Swal.fire({\n                    title: 'You are redirected to recipe!',\n                    timer: 1500,\n                    showConfirmButton: false,\n                }\n                )\n            }\n        })\n    }\n\n\n    return (\n        <div className='recipe-div'>\n            <div className='recipe-title'>\n                <h2 onClick={openRecipe}>{title}</h2>\n                <div>\n                    <p></p>\n                    <p>{dietLabel} {(time) ? `${time} min'` : null}</p>\n                </div>\n            </div>\n            <img src={image} onClick={openRecipe} />\n        </div>\n    )\n}\nexport default Recipe","import React, { Component } from 'react'\n\nexport default class Pagination extends Component {\n    render() {\n        if (this.props.recipes.length > 0) {\n            return <button\n                onClick={this.props.loadResults}>\n                load more results\n            </button>\n        } else {\n            return null\n        }\n    }\n}\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport Header from './Header'\nimport Recipe from './Recipe';\nimport Pagination from './Pagination'\nimport { v4 as uuidv4 } from 'uuid'\nimport './App.css';\n\n\nconst App = () => {\n  const APP_ID = '7570c869';\n  const APP_KEY = '5dbde407febe17d64586062bbdad10e6'\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('')\n  const [page, setPage] = useState({ from: 0, to: 12 })\n\n  const observer = useRef()\n  const lastElementRef = useCallback(node => {\n    console.log(node);\n  })\n\n  useEffect(() => {\n    getServer()\n  }, [query, page])\n\n  const getServer = async () => {\n\n    const { from, to } = page;\n    const URL_Req = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=${from}&to=${to}`\n    //console.log(URL_Req);\n\n    const response = await fetch(URL_Req)\n    const data = await response.json()\n    setRecipes([...recipes, ...data.hits]);\n    //console.log(data.hits);\n\n  }\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n  const getSearch = e => {\n    e.preventDefault()\n    setRecipes([])\n    setQuery(search)\n    setPage({ from: 0, to: 12 })\n  }\n\n\n\n\n\n  const loadResults = e => {\n    let nextFrom = page.from + 12;\n    let nextTo = page.to + 12;\n    setPage({ from: nextFrom, to: nextTo })\n  }\n\n\n  return (\n    <div className=\"App\" >\n      <Header />\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch} />\n        <button type=\"submoit\" className=\"submit-btn\">SEARCH</button>\n      </form>\n      <div className=\"results-div\">\n        {recipes.map((recipe, index) => {\n          if (recipes.length === index + 1) {\n            console.log(\"last element\")\n            return (\n              <Recipe\n                ref={lastElementRef}\n                key={uuidv4()}\n                title={recipe.recipe.label}\n                dietLabel={recipe.recipe.dietLabels}\n                image={recipe.recipe.image}\n                time={recipe.recipe.totalTime}\n                ingredients={recipe.recipe.ingredientLines}\n                healthLabels={recipe.recipe.healthLabels}\n                calories={recipe.recipe.calories}\n                cautions={recipe.recipe.cautions}\n              />\n            )\n          } else {\n            return (\n              <Recipe\n                key={uuidv4()}\n                title={recipe.recipe.label}\n                dietLabel={recipe.recipe.dietLabels}\n                image={recipe.recipe.image}\n                time={recipe.recipe.totalTime}\n                ingredients={recipe.recipe.ingredientLines}\n                healthLabels={recipe.recipe.healthLabels}\n                calories={recipe.recipe.calories}\n                cautions={recipe.recipe.cautions}\n              />\n            )\n          }\n        })}\n      </div>\n\n      <Pagination loadResults={loadResults} recipes={recipes} />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}