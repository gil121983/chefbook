{"version":3,"sources":["Header.js","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Recipe","title","time","image","dietLabel","ingredients","healthLabels","calories","cautions","openRecipe","Swal","fire","backdrop","background","imageUrl","imageHeight","html","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","timer","showConfirmButton","onClick","src","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getServer","a","exampleReq","fetch","response","json","data","hits","console","log","getSearch","e","preventDefault","onSubmit","type","onChange","target","map","recipe","key","label","dietLabels","totalTime","ingredientLines","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0OAWeA,MATf,WACI,OACI,yBAAKC,UAAU,cACX,0C,gBC0CGC,EA5CA,SAAC,GAAsF,IAApFC,EAAmF,EAAnFA,MAAOC,EAA4E,EAA5EA,KAAMC,EAAsE,EAAtEA,MAAOC,EAA+D,EAA/DA,UAAWC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAE5EC,EAAa,WACfC,IAAKC,KAAK,CACNC,SAAU,qBACVC,WAAY,sDAAuDC,SAAUX,EAC7EY,YAAa,IACbd,QACAe,KAAK,QAAD,OAAUV,EAAV,+CACaC,EADb,kEAGFC,EAHE,8DAKFH,EALE,kBAOJY,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAmB,WACpBC,MAAK,SAACC,GACDA,EAAOC,OACPb,IAAKC,KAAK,CACNV,MAAO,gCACPuB,MAAO,KACPC,mBAAmB,QAQnC,OACI,yBAAK1B,UAAU,cAEX,wBAAI2B,QAASjB,GAAaR,GAC1B,6BACI,4BACA,2BAAIG,EAAJ,IAAiBF,EAAD,UAAYA,EAAZ,SAA0B,OAE9C,yBAAKyB,IAAKxB,EAAOuB,QAASjB,MCoBvBmB,G,MAzDH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,IANnB,mBAMTK,EANS,KAMFC,EANE,KAQhBC,qBAAU,WACRC,MAEC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,gCAAAC,EAAA,6DACVC,EADU,0CACsCL,EADtC,mBAZH,WAYG,oBAXF,oCAWE,SAEOM,MAAMD,GAFb,cAEVE,EAFU,gBAGGA,EAASC,OAHZ,OAGVC,EAHU,OAIhBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MALD,2CAAH,qDAaTG,EAAY,SAAAC,GAChBA,EAAEC,iBACFd,EAASH,IAGX,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,CAAQgD,UAAWA,IACnB,0BAAMhD,UAAU,cAAcmD,SAAUH,GACtC,2BAAOI,KAAK,OAAOpD,UAAU,aAAawB,MAAOS,EAAQoB,SAd1C,SAAAJ,GACnBf,EAAUe,EAAEK,OAAO9B,OACnBsB,QAAQC,IAAId,MAaR,4BAAQmB,KAAK,UAAUpD,UAAU,cAAjC,WAEF,yBAAKA,UAAU,eACZ+B,EAAQwB,KAAI,SAAAC,GAAM,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OAAOE,MACnBxD,MAAOsD,EAAOA,OAAOE,MACrBrD,UAAWmD,EAAOA,OAAOG,WACzBvD,MAAOoD,EAAOA,OAAOpD,MACrBD,KAAMqD,EAAOA,OAAOI,UACpBtD,YAAakD,EAAOA,OAAOK,gBAC3BtD,aAAciD,EAAOA,OAAOjD,aAC5BC,SAAUgD,EAAOA,OAAOhD,SACxBC,SAAU+C,EAAOA,OAAO/C,kBC3ChBqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.f5c10c37.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <div className=\"App-header\">\n            <h1>CHEFBOOK</h1>\n\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport Swal from 'sweetalert2'\n\nconst Recipe = ({ title, time, image, dietLabel, ingredients, healthLabels, calories, cautions }) => {\n\n    const openRecipe = () => {\n        Swal.fire({\n            backdrop: 'rgba()40,40,40,0.4',\n            background: 'linear-gradient(to right, #f06406 0%, #e1fe40 100%)', imageUrl: image,\n            imageHeight: 300,\n            title,\n            html: `<div>${healthLabels}</div> \n            <div>Calories: ${calories}</div> \n            <h3>Cautions:</h3>  \n            ${cautions}\n            <h3>Ingredients:</h3>  \n            ${ingredients}\n            `,\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Recipe'\n        }).then((result) => {\n            if (result.value) {\n                Swal.fire({\n                    title: 'You are redirected to recipe!',\n                    timer: 1500,\n                    showConfirmButton: false,\n                }\n                )\n            }\n        })\n    }\n\n\n    return (\n        <div className='recipe-div'>\n\n            <h2 onClick={openRecipe}>{title}</h2>\n            <div>\n                <p></p>\n                <p>{dietLabel} {(time) ? `${time} min'` : null}</p>\n            </div>\n            <img src={image} onClick={openRecipe} />\n        </div>\n    )\n}\nexport default Recipe","import React, { useEffect, useState } from 'react';\nimport Header from './Header'\nimport Recipe from './Recipe';\nimport './App.css';\n\n\nconst App = () => {\n  const APP_ID = '7570c869';\n  const APP_KEY = '5dbde407febe17d64586062bbdad10e6'\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('')\n\n  useEffect(() => {\n    getServer()\n\n  }, [query])\n\n  const getServer = async () => {\n    const exampleReq = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    const response = await fetch(exampleReq)\n    const data = await response.json()\n    setRecipes(data.hits);\n    console.log(data.hits);\n\n  }\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n\n  }\n  const getSearch = e => {\n    e.preventDefault()\n    setQuery(search)\n  }\n\n  return (\n    <div className=\"App\" >\n      <Header getSearch={getSearch} />\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch} />\n        <button type=\"submoit\" className=\"submit-btn\">SEARCH</button>\n      </form>\n      <div className=\"results-div\">\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            dietLabel={recipe.recipe.dietLabels}\n            image={recipe.recipe.image}\n            time={recipe.recipe.totalTime}\n            ingredients={recipe.recipe.ingredientLines}\n            healthLabels={recipe.recipe.healthLabels}\n            calories={recipe.recipe.calories}\n            cautions={recipe.recipe.cautions}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}